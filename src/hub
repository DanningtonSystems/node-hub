#!/usr/bin/env node
process.defaultConfig = {
    version: 1,
    terminal: {
        commandInitiator: "gnome-terminal --",
        terminal: "gnome-terminal"
    },
    ssh: {
        enabled: false,
        sshPath: "/usr/bin/ssh",
        servers: [],
        defaults: {
            username: "root",
            port: 22,
            key: "key"
        }
    }
};

const path = require("path");
const { exec, execSync } = require("child_process");
const os = require("os");
const fs = require("fs");

const chalk = require("chalk");
const open = require("open");
const openEditor = require('open-editor');
const prompt = require("prompts");

const loadConf = require("./lib/loadConf");
const saveConf = require("./lib/saveConf");
const conf = loadConf();

if (!fs.existsSync(path.join(os.homedir() + "/Documents/node-hub/keys"))) {
    fs.mkdirSync(path.join(os.homedir() + "/Documents/node-hub/keys"));
};

loader();

async function loader() {
    if (os.platform() !== "linux") {
        await prompt({
            name: "yn",
            type: "confirm",
            message: `${chalk.yellow(`node-hub is designed for platform linux. However, you are using platform ${chalk.italic(os.platform() + "-" + os.arch)}, which may not support the UNIX filesystem structure and tools. Are you sure you want to continue?`)}`,
        }).then(f => {
            if (f.yn === false) return process.exit();
            else console.log(chalk.yellowBright("Accepted caution. Continuing.."));
            menu(); 
        });
    } else {
        menu();
    };
};

async function menu() {
    console.clear();
    let sshBool = true;
    if (conf.ssh.enabled) sshBool = false;
    const main = await prompt({
        name: "choice",
        type: "select",
        message: chalk.blueBright("Welcome to node-hub. What would you like to do?"),
        choices: [
            { title: 'SSH Ring', description: "Access systems remotely from node-hub", value: "ssh", disabled: sshBool },
            { title: 'Terminal', description: "Open a terminal", value: "terminal" },
            { title: chalk.magenta("Settings"), description: "Configure node-hub to your liking", value: "advanced" },
            { title: chalk.blue("â­¯ Exit"), value: "return", description: "Exit node-hub" }
          ],
        initial: 0
    });

    let mc = main.choice;
    
    if (mc === "terminal") {
        exec(conf.terminal.terminal, async function () {
            return menu();
        });
    } if (mc === "ssh") {
        return ssh();
    } if (mc === "return") {
        process.exit();
    } if (mc === "advanced") {
        settings();
    }
};

async function ssh() {
    console.clear();
    let sshpromptchoice = [];
    let serverchoice = [];

    conf.ssh.servers.forEach(server => {
        let opts = {
            title: `ðŸ”— ${server.name} (${server.host})`,
            value: conf.ssh.servers.indexOf(server)
        };
        sshpromptchoice.push(opts);
        serverchoice.push(opts);
    });

    sshpromptchoice.push({
        title: chalk.green("Add a system"),
        value: "addserver",
        description: "Add a new system to the SSH ring"
    });

    sshpromptchoice.push({
        title: chalk.red("Delete a system"),
        value: "delserver",
        description: "Delete a system from the SSH ring"
    });

    sshpromptchoice.push({
        title: chalk.magenta("Open key folder"),
        value: "keyfolder",
        description: "Open folder where keys for the SSH ring are stored"
    });

    sshpromptchoice.push({
        title: chalk.blue("â­¯ Return"),
        value: "return",
        description: "Return to node-hub's main menu"
    });

    const sshprompt = await prompt({
        name: "choice",
        type: "select",
        message: "Select a system or option",
        choices: sshpromptchoice,
        initial: 0
    });

    let sc = sshprompt.choice;
    if (sc === "addserver") {
        const addprompt = await prompt([
            {
                type: "text",
                name: "name",
                message: "Enter a name for this system",
            },
            {
                type: "text",
                name: "host",
                message: "Enter the hostname or IP address of the system"
            },
            {
                type: "number",
                name: "port",
                message: "Enter the port number of the SSH daemon running on the system",
                initial: conf.ssh.defaults.port
            },
            {
                type: "text",
                name: "username",
                message: "Enter your username credential for this system",
                initial: conf.ssh.defaults.username
            },
            {
                type: "text",
                name: "key",
                message: "Enter the name of the private key file to be used (keyfiles must be in ~/Documents/node-hub/keys)",
                initial: conf.ssh.defaults.key
            },
            {
                type: "confirm",
                name: "confirmation",
                message: "Are you sure you want to add this host to the SSH ring?"
            }
        ]);

        if (addprompt.confirmation) {
            let newhost = {
                name: addprompt.name,
                host: addprompt.host,
                port: addprompt.port,
                username: addprompt.username,
                key: addprompt.key,
                index: conf.ssh.servers.length
            };
            conf.ssh.servers.push(newhost);
            saveConf(conf);
        };

        return ssh();
    } else if (sc === "delserver") {
        const delprompt = await prompt([{
            name: "choice",
            type: "select",
            message: "Select a server to remove",
            choices: serverchoice,
            initial: 0
        }, {
            type: "confirm",
            name: "confirmation",
            message: "Are you sure you want to delete this host from the SSH ring?"
        }]);

        if (delprompt.confirmation) {
            conf.ssh.servers.splice(delprompt.choice, 1);
            saveConf(conf);
        };

        return ssh();
    } else if (sc === "return") {
        return menu();
    } else if (sc === "keyfolder") {
        await open(path.join(os.homedir() + "/Documents/node-hub/keys"));
        return ssh();
    } else {
        if (conf.ssh.servers[sc] === undefined) return menu();
        var server = conf.ssh.servers[sc];
        exec(`${conf.terminal.terminal} ${conf.terminal.commandInitiator} ${conf.ssh.sshPath} -i ${path.join(os.homedir() + "/Documents/node-hub/keys/" + server.key)} -p ${server.port} ${server.username}@${server.host}`, async function () {
            return ssh();
        });
    };
};

async function settings() {
    console.clear();
    const advancedprompt = await prompt([
        {
            type: "select",
            name: "choice",
            message: "Select an option",
            choices: [
                { title: "Set path to terminal", value: "term", description: "Change the terminal used for some of node-hub's tools" },
                { title: "SSH ring settings", value: "ssh", description: "Configure node-hub's SSH ring" },
                { title: chalk.red("ADVANCED: Open config.json"), value: "config", description: "Manually edit the configuration file for node-hub" },
                { title: chalk.blue("â­¯ Return"), value: "return", description: "Return to node-hub's main menu" }
            ]
        }
    ]);

    let ac = advancedprompt.choice;

    if (ac === "config") {
        const detail = openEditor.make([path.join(os.homedir() + "/Documents/node-hub/config.json")]);
        if (detail.isTerminalEditor) {
            execSync(`${conf.terminal.terminal} ${conf.terminal.commandInitiator} ${detail.binary} ${detail.arguments.join(" ")}`);
        } else {
            openEditor([path.join(os.homedir() + "/Documents/node-hub/config.json")]);
        };
        
        return settings();

    } else if (ac === "term") {
        const termprompt = await prompt([
            {
                type: "text",
                name: "terminal",
                message: "Enter the path to the terminal you wish to use",
                default: conf.terminal.terminalPath
            },
            {
                type: "text",
                name: "terminalInitiator",
                message: "Enter the terminal syntax used to run a command \n(for example, if you're using GNOME Terminal, put -- here, or put -e here if you're using KDE Konsole)"
            },
            {
                type: "confirm",
                name: "confirmation",
                message: "Are you sure you want to change the terminal and terminal initiator path?"
            }
        ]);

        if (termprompt.confirmation) {
            conf.terminal.terminal = termprompt.terminal;
            conf.terminal.commandInitiator = termprompt.terminalInitiator;
            saveConf(conf);
        };

        return settings();
    } else if (ac === "return") {
        return menu();
    } else if (ac === "ssh") {
        return sshsettings();
    } else {
        return menu();
    };
};

async function sshsettings() {
    console.clear();

    const sshprompt = await prompt([
        {
            type: "select",
            name: "choice",
            message: "Select an option",
            choices: [
                { title: "Ring defaults", value: "defaults", description: "Configure defaults for creating new systems in the SSH ring" },
                { title: chalk.magenta(`${conf.ssh.enabled ? "Disable" : "Enable"} SSH ring`), value: "togglessh", description: "Toggle the SSH ring" },
                { title: chalk.blue("â­¯ Return"), value: "return", description: "Return to Settings" }
            ]
        }
    ]);

    let ac = sshprompt.choice;

    if (ac === "togglessh") {
        let oppositeOption = conf.ssh.enabled ? false : true;
        let string = conf.ssh.enabled ? "Are you sure you want to disable the SSH Ring?" : "Are you sure you want to enable the SSH ring?";
        const termprompt = await prompt([
            {
                type: "confirm",
                name: "confirmation",
                message: string
            }
        ]);

        if (termprompt.confirmation) {
            conf.ssh.enabled = oppositeOption;
            saveConf(conf);
        };

        return sshsettings();
    } else if (ac === "defaults") {
        return sshdefaultsettings();
    } else if (ac === "return") {
        return settings();
    } else {
        return settings();
    };

    async function sshdefaultsettings() {
        console.clear();

        const sshdefaultprompt = await prompt([
            {
                type: "select",
                name: "choice",
                message: "Select a ring default to configure",
                choices: [
                    { title: "Username", value: "username", description: "Configure default usernames" },
                    { title: "Port", value: "port", description: "Configure the default port" },
                    { title: "SSH key", value: "key", description: "Configure the default SSH key to be used at login" },
                    { title: chalk.blue("â­¯ Return"), value: "return", description: "Return to SSH settings" }
                ]
            }
        ]);    

        let ac = sshdefaultprompt.choice;

        if (ac === "username") {
            console.clear();
            const usernameprompt = await prompt([
                {
                    type: "text",
                    name: "username",
                    message: "Enter the username you wish to use as the ring default",
                    default: conf.ssh.defaults.username
                },
                {
                    type: "confirm",
                    name: "confirmation",
                    message: "Are you sure you want to change the default ring username?"
                }
            ]);

            if (usernameprompt.confirmation) {
                conf.ssh.defaults.username = usernameprompt.username;
                saveConf(conf);
            };

            return sshdefaultsettings();
        } else if (ac === "port") {
            console.clear();
            const portprompt = await prompt([
                {
                    type: "number",
                    name: "port",
                    message: "Enter the port you wish to use as the ring default",
                    default: conf.ssh.defaults.port
                },
                {
                    type: "confirm",
                    name: "confirmation",
                    message: "Are you sure you want to change the default ring port?"
                }
            ]);

            if (portprompt.confirmation) {
                conf.ssh.defaults.port = portprompt.port;
                saveConf(conf);
            };

            return sshdefaultsettings();
        } else if (ac === "key") {
            console.clear();
            const kp = await prompt([
                {
                    type: "text",
                    name: "key",
                    message: "Enter the SSH key you wish to use as the ring default",
                    default: conf.ssh.defaults.port
                },
                {
                    type: "confirm",
                    name: "confirmation",
                    message: "Are you sure you want to change the default ring SSH key?"
                }
            ]);

            if (kp.confirmation) {
                conf.ssh.defaults.key = kp.key;
                saveConf(conf);
            };

            return sshdefaultsettings();
        } else if (ac === "return") {
            return sshsettings();
        } else {
            return sshsettings();
        };
    };
};